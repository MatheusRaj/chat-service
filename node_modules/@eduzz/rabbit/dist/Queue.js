"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
var fn_1 = require("./fn");
var Queue = /** @class */ (function () {
    function Queue(connection, name) {
        this.arguments = {};
        this.connection = connection;
        this.options = {
            name: name,
            topics: [],
            durable: true,
            enableNack: true,
            retryTimeout: 0,
            nackQueue: name + ".nack",
            retryTopic: name + ".retry",
            nackTopic: name + ".nack",
            autoDelete: false,
            exclusive: false,
            prefetch: 1
        };
    }
    Queue.prototype.topic = function () {
        var _a;
        var topics = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            topics[_i] = arguments[_i];
        }
        (_a = this.options.topics).push.apply(_a, topics);
        return this;
    };
    Queue.prototype.durable = function (durable) {
        if (durable === void 0) { durable = true; }
        this.options.durable = durable;
        return this;
    };
    Queue.prototype.disableNack = function () {
        this.options.enableNack = false;
        return this;
    };
    Queue.prototype.retryTimeout = function (timeout) {
        if (timeout < 0) {
            throw new Error('Invalid timeout');
        }
        this.options.retryTimeout = timeout;
        return this;
    };
    Queue.prototype.ephemeral = function () {
        this.options.autoDelete = true;
        var id = Math.ceil(Math.random() * Number.MAX_SAFE_INTEGER);
        this.options.name = this.options.name + "." + id;
        this.options.nackQueue = this.options.name + ".nack";
        this.options.retryTopic = this.options.name + ".retry";
        this.options.nackTopic = this.options.name + ".nack";
        return this;
    };
    Queue.prototype.exclusive = function () {
        this.options.exclusive = true;
        return this;
    };
    Queue.prototype.prefetch = function (quantity) {
        if (quantity <= 0) {
            throw new Error('prefetch must be greater than zero');
        }
        this.options.prefetch = quantity;
        return this;
    };
    Queue.prototype.priority = function (max) {
        this.arguments['x-max-priority'] = max;
        return this;
    };
    Queue.prototype.create = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ch, exchange;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.connection.createChannel()];
                    case 1:
                        ch = _a.sent();
                        exchange = this.connection.getExchange();
                        return [4 /*yield*/, this.configureNackQueue(exchange, ch)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.configureQueue(exchange, ch)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Queue.prototype.listen = function (callback) {
        return __awaiter(this, void 0, void 0, function () {
            var active, _loop_1, this_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.options.topics.length === 0) {
                            throw new Error('You must specify an least one topic');
                        }
                        active = false;
                        _loop_1 = function () {
                            var ch_1, exchange, consumeFn, err_1;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _b.trys.push([0, 8, , 9]);
                                        if (!active) return [3 /*break*/, 2];
                                        return [4 /*yield*/, fn_1.sleep(1000)];
                                    case 1:
                                        _b.sent();
                                        return [2 /*return*/, "continue"];
                                    case 2: return [4 /*yield*/, this_1.connection.createChannel(function () {
                                            active = false;
                                        })];
                                    case 3:
                                        ch_1 = _b.sent();
                                        exchange = this_1.connection.getExchange();
                                        return [4 /*yield*/, this_1.configureNackQueue(exchange, ch_1)];
                                    case 4:
                                        _b.sent();
                                        return [4 /*yield*/, this_1.configureQueue(exchange, ch_1)];
                                    case 5:
                                        _b.sent();
                                        return [4 /*yield*/, ch_1.prefetch(this_1.options.prefetch)];
                                    case 6:
                                        _b.sent();
                                        consumeFn = function (msg) { return __awaiter(_this, void 0, void 0, function () {
                                            var payload, result, err_2;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        if (!msg) {
                                                            return [2 /*return*/];
                                                        }
                                                        _a.label = 1;
                                                    case 1:
                                                        _a.trys.push([1, 3, , 4]);
                                                        payload = JSON.parse(msg.content.toString());
                                                        return [4 /*yield*/, callback(payload, msg)];
                                                    case 2:
                                                        result = _a.sent();
                                                        if (!result) {
                                                            ch_1.nack(msg, false, false);
                                                            return [2 /*return*/];
                                                        }
                                                        ch_1.ack(msg);
                                                        return [3 /*break*/, 4];
                                                    case 3:
                                                        err_2 = _a.sent();
                                                        try {
                                                            ch_1.nack(msg, false, false);
                                                        }
                                                        catch (_b) { }
                                                        return [3 /*break*/, 4];
                                                    case 4: return [2 /*return*/];
                                                }
                                            });
                                        }); };
                                        active = true;
                                        return [4 /*yield*/, ch_1.consume(this_1.options.name, consumeFn, { noAck: false })];
                                    case 7:
                                        _b.sent();
                                        return [3 /*break*/, 9];
                                    case 8:
                                        err_1 = _b.sent();
                                        console.log('[rabbit] connection failed');
                                        return [3 /*break*/, 9];
                                    case 9: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        return [5 /*yield**/, _loop_1()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Queue.prototype.configureNackQueue = function (exchange, ch) {
        return __awaiter(this, void 0, void 0, function () {
            var args;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.options.enableNack) {
                            return [2 /*return*/];
                        }
                        args = {};
                        if (this.options.retryTimeout) {
                            args = {
                                'x-dead-letter-exchange': exchange,
                                'x-dead-letter-routing-key': this.options.retryTopic,
                                'x-message-ttl': this.options.retryTimeout
                            };
                        }
                        return [4 /*yield*/, ch.assertQueue(this.options.nackQueue, {
                                durable: this.options.durable,
                                autoDelete: this.options.autoDelete || false,
                                arguments: args
                            })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, ch.bindQueue(this.options.nackQueue, exchange, this.options.nackTopic)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Queue.prototype.configureQueue = function (exchange, ch) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, topic;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.options.enableNack) {
                            this.arguments['x-dead-letter-exchange'] = exchange;
                            this.arguments['x-dead-letter-routing-key'] = this.options.nackTopic;
                        }
                        return [4 /*yield*/, ch.assertQueue(this.options.name, {
                                durable: this.options.durable,
                                autoDelete: this.options.autoDelete || false,
                                exclusive: this.options.exclusive || false,
                                arguments: this.arguments
                            })];
                    case 1:
                        _b.sent();
                        _i = 0, _a = this.options.topics;
                        _b.label = 2;
                    case 2:
                        if (!(_i < _a.length)) return [3 /*break*/, 5];
                        topic = _a[_i];
                        return [4 /*yield*/, ch.bindQueue(this.options.name, exchange, topic)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5:
                        if (!(this.options.enableNack && this.options.retryTimeout)) return [3 /*break*/, 7];
                        return [4 /*yield*/, ch.bindQueue(this.options.name, exchange, this.options.retryTopic)];
                    case 6:
                        _b.sent();
                        _b.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return Queue;
}());
exports.Queue = Queue;
