import * as amqp from 'amqplib';
import { DelayQueue } from './DelayQueue';
import { IConnectionOptions } from './interfaces/IConnectionOptions';
import { IFallbackAdapter } from './interfaces/IFallbackAdapter';
import { IMessage } from './interfaces/IMessage';
import { Publisher } from './Publisher';
import { Queue } from './Queue';
import { IPublishResult } from './interfaces/IPublishResult';
declare type closeFn = () => void;
export declare class Connection {
    private connected;
    private channels;
    private connection?;
    private options;
    private initialized;
    private fallbackAdapter;
    private publishers;
    constructor(options: IConnectionOptions);
    createChannel(onClose?: closeFn): Promise<amqp.Channel>;
    isConnected(): boolean;
    registerShutdownSignal(): this;
    setFallbackAdapter(adapter: IFallbackAdapter): this;
    storeFallback(publisher: Publisher, message: IMessage<any>): Promise<IPublishResult>;
    getPublishersTopics(): string[];
    getPublishersByTopic(topic: string): Publisher[];
    topic(topic: string): Publisher;
    queue(name: string): Queue;
    delayQueue(name: string): DelayQueue;
    getExchange(): string;
    initialize(): Promise<void>;
    private destroy;
    private getConnection;
}
export {};
