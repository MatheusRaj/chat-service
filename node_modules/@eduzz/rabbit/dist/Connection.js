"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connection = void 0;
var amqp = __importStar(require("amqplib"));
var DelayQueue_1 = require("./DelayQueue");
var Memory_1 = require("./Fallback/Adapter/Memory");
var fn_1 = require("./fn");
var Publisher_1 = require("./Publisher");
var Queue_1 = require("./Queue");
var fs_1 = __importDefault(require("fs"));
var version = JSON.parse(fs_1.default.readFileSync(__dirname + '/../package.json').toString()).version;
var Connection = /** @class */ (function () {
    function Connection(options) {
        this.connected = false;
        this.channels = [];
        this.initialized = false;
        this.publishers = [];
        var optionsDefaults = {
            processExitWhenUnableToConnectFirstTime: true,
        };
        this.options = __assign(__assign({}, optionsDefaults), options);
        this.setFallbackAdapter(new Memory_1.Memory());
    }
    Connection.prototype.createChannel = function (onClose) {
        if (onClose === void 0) { onClose = function () { }; }
        return __awaiter(this, void 0, void 0, function () {
            var connection, channel, removeChannel;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getConnection()];
                    case 1:
                        connection = _a.sent();
                        return [4 /*yield*/, connection.createChannel()];
                    case 2:
                        channel = _a.sent();
                        channel.assertExchange(this.options.exchange, this.options.exchangeType);
                        this.channels.push(channel);
                        removeChannel = function () {
                            var index = _this.channels.findIndex(function (c) { return c === channel; });
                            _this.channels.splice(index, 1);
                        };
                        channel.on('error', function () {
                            removeChannel();
                            onClose();
                        });
                        channel.on('close', function () {
                            removeChannel();
                            onClose();
                        });
                        return [2 /*return*/, channel];
                }
            });
        });
    };
    Connection.prototype.isConnected = function () {
        return this.connected;
    };
    Connection.prototype.registerShutdownSignal = function () {
        var _this = this;
        process.once('SIGINT', function () {
            _this.destroy();
        });
        return this;
    };
    Connection.prototype.setFallbackAdapter = function (adapter) {
        this.fallbackAdapter = adapter;
        this.fallbackAdapter.setConnection(this);
        return this;
    };
    Connection.prototype.storeFallback = function (publisher, message) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fallbackAdapter.store(publisher.getTopic(), message)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, { status: true, destination: 'buffer', adapter: 'memory' }];
                }
            });
        });
    };
    Connection.prototype.getPublishersTopics = function () {
        return this.publishers.map(function (p) { return p.getTopic(); });
    };
    Connection.prototype.getPublishersByTopic = function (topic) {
        return this.publishers.filter(function (p) { return p.getTopic() === topic; });
    };
    Connection.prototype.topic = function (topic) {
        var existingPublisher = this.getPublishersByTopic(topic);
        if (existingPublisher.length > 0) {
            return existingPublisher[0];
        }
        var publisher = new Publisher_1.Publisher(this, topic);
        this.publishers.push(publisher);
        return publisher;
    };
    Connection.prototype.queue = function (name) {
        return new Queue_1.Queue(this, name);
    };
    Connection.prototype.delayQueue = function (name) {
        return new DelayQueue_1.DelayQueue(this, name);
    };
    Connection.prototype.getExchange = function () {
        return this.options.exchange;
    };
    Connection.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var failedConnectionAttempts, connectionAttempts, _a, dsn, maxConnectionAttempts, connectionName, processExitWhenUnableToConnectFirstTime, separator, connection, err_1;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.initialized) {
                            return [2 /*return*/];
                        }
                        this.initialized = true;
                        failedConnectionAttempts = 0;
                        connectionAttempts = 0;
                        _a = this.options, dsn = _a.dsn, maxConnectionAttempts = _a.maxConnectionAttempts, connectionName = _a.connectionName, processExitWhenUnableToConnectFirstTime = _a.processExitWhenUnableToConnectFirstTime;
                        _b.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 9];
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 6, , 7]);
                        if (!this.connected) return [3 /*break*/, 4];
                        return [4 /*yield*/, fn_1.sleep(1000)];
                    case 3:
                        _b.sent();
                        return [3 /*break*/, 1];
                    case 4:
                        separator = dsn.includes('?') ? '&' : '?';
                        return [4 /*yield*/, amqp.connect("" + dsn + separator + "heartbeat=3", {
                                clientProperties: {
                                    product: "@eduzz/rabbit\nv" + version + "\n\u2615",
                                    // eslint-disable-next-line camelcase
                                    connection_name: connectionName,
                                    timeout: 2000
                                }
                            })];
                    case 5:
                        connection = _b.sent();
                        connection.on('error', function (err) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                console.log('[rabbit] connection error!', err);
                                this.destroy();
                                return [2 /*return*/];
                            });
                        }); });
                        connection.on('close', function (err) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                console.log('[rabbit] connection closed!', err);
                                this.destroy();
                                return [2 /*return*/];
                            });
                        }); });
                        failedConnectionAttempts++;
                        console.log("[rabbit] connected: failedConnectionAttempts= " + failedConnectionAttempts + ", connectionAttempts=" + connectionAttempts);
                        connectionAttempts = 0;
                        this.connected = true;
                        this.connection = connection;
                        return [3 /*break*/, 7];
                    case 6:
                        err_1 = _b.sent();
                        this.destroy();
                        connectionAttempts++;
                        console.log("[rabbit] trying to connect, failedConnectionAttempts=" + failedConnectionAttempts + ", connectionAttempts=" + connectionAttempts);
                        if (processExitWhenUnableToConnectFirstTime && failedConnectionAttempts === 0) {
                            console.log('[rabbit] failed to connect to rabbitmq', err_1);
                            console.log('[rabbit] finishing the process');
                            process.exit(1);
                        }
                        if (maxConnectionAttempts && connectionAttempts > maxConnectionAttempts) {
                            console.log("[rabbit] number of connection attempts exceeded: " + connectionAttempts, err_1);
                            throw err_1;
                        }
                        return [3 /*break*/, 7];
                    case 7: return [4 /*yield*/, fn_1.sleep(1000)];
                    case 8:
                        _b.sent();
                        return [3 /*break*/, 1];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    Connection.prototype.destroy = function () {
        if (!this.connection || !this.connected) {
            return;
        }
        this.connected = false;
        var connection = this.connection;
        this.connection = null;
        try {
            this.channels = [];
            connection.removeAllListeners('error');
            connection.close().catch(function () { });
        }
        catch (_a) { }
    };
    Connection.prototype.getConnection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.initialize();
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        if (this.connection) {
                            return [2 /*return*/, this.connection];
                        }
                        return [4 /*yield*/, fn_1.sleep(1000)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return Connection;
}());
exports.Connection = Connection;
