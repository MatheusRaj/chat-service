"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.disconnect = exports.send = exports.typing = exports.join = exports.connection = exports.persistData = void 0;
const tslib_1 = require("tslib");
const sentry = (0, tslib_1.__importStar)(require("@sentry/node"));
const rabbitmq_1 = require("./rabbitmq");
const persistData = async (params) => {
    try {
        await (0, rabbitmq_1.sendMessageToRabbit)(params);
    }
    catch (error) {
        sentry.captureException(error);
    }
};
exports.persistData = persistData;
const connection = (io, listener) => {
    console.log('Connection called');
    return io.on('connection', socket => {
        socket.on('connect_error', err => {
            console.log(`connect_error due to ${err.message}`);
        });
        console.log('CONNECTION');
        listener(socket);
    });
};
exports.connection = connection;
const join = (io, callback) => (0, exports.connection)(io, socket => {
    console.log('listener do join');
    socket.on('join', (payload) => {
        console.log('event do join');
        socket.join(String(payload.room));
        callback && callback(payload);
    });
});
exports.join = join;
const typing = (io, callback) => (0, exports.connection)(io, socket => {
    console.log('listener do typing');
    socket.on('typing', (payload) => {
        console.log('event do typing');
        socket.to(String(payload.room)).emit('typing', payload);
        callback && callback(payload);
    });
});
exports.typing = typing;
const send = (io, callback) => (0, exports.connection)(io, socket => {
    console.log('listener do send');
    socket.on('send', (payload) => {
        console.log('event do send: ', JSON.stringify(payload));
        socket.to(String(payload.room)).emit('receive', payload);
        if (!!payload.persistData) {
            (0, exports.persistData)(Object.assign(Object.assign({}, payload.persistData), { payload: payload.data }));
        }
        callback && callback(payload);
    });
});
exports.send = send;
const disconnect = (io, callback) => (0, exports.connection)(io, socket => {
    socket.on('disconnect', (payload) => {
        socket.to(String(payload.room)).emit('disconnect', payload);
        callback && callback(payload);
    });
});
exports.disconnect = disconnect;
exports.default = { connection: exports.connection, join: exports.join, send: exports.send, typing: exports.typing, disconnect: exports.disconnect };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NvY2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsa0VBQXVDO0FBSXZDLHlDQUFpRDtBQUUxQyxNQUFNLFdBQVcsR0FBRyxLQUFLLEVBQUMsTUFBTSxFQUFDLEVBQUU7SUFDeEMsSUFBSTtRQUNGLE1BQU0sSUFBQSw4QkFBbUIsRUFBQyxNQUFNLENBQUMsQ0FBQztLQUNuQztJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2hDO0FBQ0gsQ0FBQyxDQUFDO0FBTlcsUUFBQSxXQUFXLGVBTXRCO0FBRUssTUFBTSxVQUFVLEdBQUcsQ0FBQyxFQUFVLEVBQUUsUUFBa0IsRUFBRSxFQUFFO0lBQzNELE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUVqQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQ2xDLE1BQU0sQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUUxQixRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFYVyxRQUFBLFVBQVUsY0FXckI7QUFFSyxNQUFNLElBQUksR0FBRyxDQUFDLEVBQVUsRUFBRSxRQUFtQixFQUFFLEVBQUUsQ0FDdEQsSUFBQSxrQkFBVSxFQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsRUFBRTtJQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDaEMs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dCI6WyJpbXBvcnQgKiBhcyBzZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcblxuaW1wb3J0IHsgU2VydmVyIH0gZnJvbSAnc29ja2V0LmlvJztcbmltcG9ydCB7IElTZW5kIH0gZnJvbSAnLi9pbnRlcmZhY2VzL0lTZW5kJztcbmltcG9ydCB7IHNlbmRNZXNzYWdlVG9SYWJiaXQgfSBmcm9tICcuL3JhYmJpdG1xJztcblxuZXhwb3J0IGNvbnN0IHBlcnNpc3REYXRhID0gYXN5bmMgcGFyYW1zID0+IHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBzZW5kTWVzc2FnZVRvUmFiYml0KHBhcmFtcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgc2VudHJ5LmNhcHR1cmVFeGNlcHRpb24oZXJyb3IpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY29ubmVjdGlvbiA9IChpbzogU2VydmVyLCBsaXN0ZW5lcjogRnVuY3Rpb24pID0+IHtcbiAgY29uc29sZS5sb2coJ0Nvbm5lY3Rpb24gY2FsbGVkJyk7XG5cbiAgcmV0dXJuIGlvLm9uKCdjb25uZWN0aW9uJywgc29ja2V0ID0+IHtcbiAgICBzb2NrZXQub24oJ2Nvbm5lY3RfZXJyb3InLCBlcnIgPT4ge1xuICAgICAgY29uc29sZS5sb2coYGNvbm5lY3RfZXJyb3IgZHVlIHRvICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coJ0NPTk5FQ1RJT04nKTtcblxuICAgIGxpc3RlbmVyKHNvY2tldCk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGpvaW4gPSAoaW86IFNlcnZlciwgY2FsbGJhY2s/OiBGdW5jdGlvbikgPT5cbiAgY29ubmVjdGlvbihpbywgc29ja2V0ID0+IHtcbiAgICBjb25zb2xlLmxvZygnbGlzdGVuZXIgZG8gam9pbicpO1xuICAgIHNvY2tldC5vbignam9pbicsIChwYXlsb2FkOiBJU2VuZCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ2V2ZW50IGRvIGpvaW4nKTtcbiAgICAgIHNvY2tldC5qb2luKFN0cmluZyhwYXlsb2FkLnJvb20pKTtcblxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socGF5bG9hZCk7XG4gICAgfSk7XG4gIH0pO1xuXG5leHBvcnQgY29uc3QgdHlwaW5nID0gKGlvOiBTZXJ2ZXIsIGNhbGxiYWNrPzogRnVuY3Rpb24pID0+XG4gIGNvbm5lY3Rpb24oaW8sIHNvY2tldCA9PiB7XG4gICAgY29uc29sZS5sb2coJ2xpc3RlbmVyIGRvIHR5cGluZycpO1xuXG4gICAgc29ja2V0Lm9uKCd0eXBpbmcnLCAocGF5bG9hZDogSVNlbmQpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdldmVudCBkbyB0eXBpbmcnKTtcblxuICAgICAgc29ja2V0LnRvKFN0cmluZyhwYXlsb2FkLnJvb20pKS5lbWl0KCd0eXBpbmcnLCBwYXlsb2FkKTtcblxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socGF5bG9hZCk7XG4gICAgfSk7XG4gIH0pO1xuXG5leHBvcnQgY29uc3Qgc2VuZCA9IChpbzogU2VydmVyLCBjYWxsYmFjaz86IEZ1bmN0aW9uKSA9PlxuICBjb25uZWN0aW9uKGlvLCBzb2NrZXQgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdsaXN0ZW5lciBkbyBzZW5kJyk7XG5cbiAgICBzb2NrZXQub24oJ3NlbmQnLCAocGF5bG9hZDogSVNlbmQpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdldmVudCBkbyBzZW5kOiAnLCBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSk7XG4gICAgICBzb2NrZXQudG8oU3RyaW5nKHBheWxvYWQucm9vbSkpLmVtaXQoJ3JlY2VpdmUnLCBwYXlsb2FkKTtcblxuICAgICAgaWYgKCEhcGF5bG9hZC5wZXJzaXN0RGF0YSkge1xuICAgICAgICBwZXJzaXN0RGF0YSh7IC4uLnBheWxvYWQucGVyc2lzdERhdGEsIHBheWxvYWQ6IHBheWxvYWQuZGF0YSB9KTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socGF5bG9hZCk7XG4gICAgfSk7XG4gIH0pO1xuXG5leHBvcnQgY29uc3QgZGlzY29ubmVjdCA9IChpbzogU2VydmVyLCBjYWxsYmFjaz86IEZ1bmN0aW9uKSA9PlxuICBjb25uZWN0aW9uKGlvLCBzb2NrZXQgPT4ge1xuICAgIHNvY2tldC5vbignZGlzY29ubmVjdCcsIChwYXlsb2FkOiBJU2VuZCkgPT4ge1xuICAgICAgc29ja2V0LnRvKFN0cmluZyhwYXlsb2FkLnJvb20pKS5lbWl0KCdkaXNjb25uZWN0JywgcGF5bG9hZCk7XG5cbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHBheWxvYWQpO1xuICAgIH0pO1xuICB9KTtcblxuZXhwb3J0IGRlZmF1bHQgeyBjb25uZWN0aW9uLCBqb2luLCBzZW5kLCB0eXBpbmcsIGRpc2Nvbm5lY3QgfTtcbiJdfQ==